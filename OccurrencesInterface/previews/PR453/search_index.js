var documenterSearchIndex = {"docs":
[{"location":"#OccurrencesInterface","page":"OccurrencesInterface","title":"OccurrencesInterface","text":"","category":"section"},{"location":"","page":"OccurrencesInterface","title":"OccurrencesInterface","text":"Modules = [OccurrencesInterface]\nOrder   = [:function, :type]","category":"page"},{"location":"#OccurrencesInterface.__demodata-Tuple{}","page":"OccurrencesInterface","title":"OccurrencesInterface.__demodata","text":"OccurrencesInterface.__demodata()\n\nThis dataset has 2147 observations of bigfoot from the Bigfoot Field Researchers Organization, a community science project on cryptids.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.absences-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.absences","text":"absences(c::T) where {T<:AbstractOccurrenceCollection}\n\nReturns an Occurrences where only the occurrences in the initial collection for which presence evaluates to false are kept.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.date-Tuple{Occurrence}","page":"OccurrencesInterface","title":"OccurrencesInterface.date","text":"date(o::Occurrence)\n\nReturns the date (technically a DateTime object) documenting the time of occurrence event. Can be missing if not known.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.date-Tuple{T} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.date","text":"date(::AbstractOccurrence)\n\nDefault method for any abstract occurrence type for the date operation. Unless overloaded, this returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.date-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.date","text":"date(::AbstractOccurrenceCollection)\n\nDefault method for any abstract occurrence collection type for the date operation. Unless overloaded, this returns an array of date on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.date-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.date","text":"date(::Vector{AbstractOccurrence})\n\nDefault method for any vector of occurrence type for the date operation. Unless overloaded, this returns an array of date on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.elements-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.elements","text":"elements(::T) where {T<:AbstractOccurrenceCollection}\n\nReturns the elements contained in an abstract collection of occurrences â€“ this must be something that can be iterated. The default value, when unimplemented, is nothing. Note that when overloaded as part of your own implementation of the interface, this must return a Vector.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.entity-Tuple{Occurrence}","page":"OccurrencesInterface","title":"OccurrencesInterface.entity","text":"entity(o::Occurrence)\n\nReturns the entity (species name) for an occurrence event.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.entity-Tuple{T} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.entity","text":"entity(::AbstractOccurrence)\n\nDefault method for any abstract occurrence type for the entity operation. Unless overloaded, this returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.entity-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.entity","text":"entity(::AbstractOccurrenceCollection)\n\nDefault method for any abstract occurrence collection type for the entity operation. Unless overloaded, this returns an array of entity on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.entity-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.entity","text":"entity(::Vector{AbstractOccurrence})\n\nDefault method for any vector of occurrence type for the entity operation. Unless overloaded, this returns an array of entity on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.place-Tuple{Occurrence}","page":"OccurrencesInterface","title":"OccurrencesInterface.place","text":"place(o::Occurrence)\n\nReturns the place of the occurrence event, either as a tuple of float in the longitude, latitude format, or as missing. The CRS is assumed to be WGS84 with no option to change it. This follows the GeoJSON specification.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.place-Tuple{T} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.place","text":"place(::AbstractOccurrence)\n\nDefault method for any abstract occurrence type for the place operation. Unless overloaded, this returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.place-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.place","text":"place(::AbstractOccurrenceCollection)\n\nDefault method for any abstract occurrence collection type for the place operation. Unless overloaded, this returns an array of place on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.place-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.place","text":"place(::Vector{AbstractOccurrence})\n\nDefault method for any vector of occurrence type for the place operation. Unless overloaded, this returns an array of place on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.presence-Tuple{Occurrence}","page":"OccurrencesInterface","title":"OccurrencesInterface.presence","text":"presence(o::Occurrence)\n\nReturns a Bool for the occurrence status, where true is the presence of the entity and false is the (pseudo)absence.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.presence-Tuple{T} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.presence","text":"presence(::AbstractOccurrence)\n\nDefault method for any abstract occurrence type for the presence operation. Unless overloaded, this returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.presence-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.presence","text":"presence(::AbstractOccurrenceCollection)\n\nDefault method for any abstract occurrence collection type for the presence operation. Unless overloaded, this returns an array of presence on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.presence-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.presence","text":"presence(::Vector{AbstractOccurrence})\n\nDefault method for any vector of occurrence type for the presence operation. Unless overloaded, this returns an array of presence on all elements of the argument.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.presences-Tuple{T} where T<:AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.presences","text":"presences(c::T) where {T<:AbstractOccurrenceCollection}\n\nReturns an Occurrences where only the occurrences in the initial collection for which presence evaluates to true are kept.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.AbstractOccurrence","text":"AbstractOccurrence\n\nOther types describing a single observation should be sub-types of this. Occurrences are always defined as a single observation of a single species.\n\n\n\n\n\n","category":"type"},{"location":"#OccurrencesInterface.AbstractOccurrenceCollection","page":"OccurrencesInterface","title":"OccurrencesInterface.AbstractOccurrenceCollection","text":"AbstractOccurrenceCollection\n\nOther types describing multiple observations can be sub-types of this. Occurrences collections are a way to collect multiple observations of arbitrarily many species.\n\n\n\n\n\n","category":"type"},{"location":"#OccurrencesInterface.Occurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.Occurrence","text":"Occurrence\n\nThis is a sub-type of AbstractOccurrence, with the following types:\n\nwhat - species name, defaults to \"\"\npresence - a boolean to mark the presence of the species, defaults to true\nwhere - a tuple giving the location as longitude,latitude in WGS84, or missing, defaults to missing\nwhen - a DateTime giving the date of observation, or missing, defaults to missing\n\nWhen the interface is properly implemented for any type that is a sub-type of AbstractOccurrence, there is an Occurrence object can be created directly with e.g. Occurrence(observation). There is, similarly, an automatically implemented convert method.\n\n\n\n\n\n","category":"type"},{"location":"#OccurrencesInterface.Occurrence-Tuple{T} where T<:AbstractOccurrence","page":"OccurrencesInterface","title":"OccurrencesInterface.Occurrence","text":"Occurrence(t::T) where {T<:AbstractOccurrence}\n\nGiven a type that is a subtype of AbstractOccurrence, constructs an Occurrence object using the methods in the interface. This should not be overloaded in other packages.\n\n\n\n\n\n","category":"method"},{"location":"#OccurrencesInterface.Occurrences","page":"OccurrencesInterface","title":"OccurrencesInterface.Occurrences","text":"Occurrences\n\nThis is a sub-type of AbstractOccurrenceCollection. No default value.\n\n\n\n\n\n","category":"type"}]
}
