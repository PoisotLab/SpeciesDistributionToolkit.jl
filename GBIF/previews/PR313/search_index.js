var documenterSearchIndex = {"docs":
[{"location":"types/#Data-representation","page":"Data representation","title":"Data representation","text":"","category":"section"},{"location":"types/","page":"Data representation","title":"Data representation","text":"GBIFTaxon\nGBIFRecord\nGBIFRecords","category":"page"},{"location":"types/#GBIF.GBIFTaxon","page":"Data representation","title":"GBIF.GBIFTaxon","text":"Representation of a GBIF taxon\n\nAll taxonomic level fields can either be missing, or a pair linking the name of the taxon/level to its unique key in the GBIF database.\n\nname - the vernacular name of the taxon\n\nscientific - the accepted scientific name of the species\n\nstatus - the status of the taxon\n\nmatch - the type of match\n\nkingdom - a Pair linking the name of the kingdom to its unique ID\n\nphylum - a Pair linking the name of the phylum to its unique ID\n\nclass - a Pair linking the name of the class to its unique ID\n\norder - a Pair linking the name of the order to its unique ID\n\nfamily - a Pair linking the name of the family to its unique ID\n\ngenus - a Pair linking the name of the genus to its unique ID\n\nspecies - a Pair linking the name of the species to its unique ID\n\nconfidence - an Int64 to note the confidence in the match\n\nsynonym - a Boolean indicating whether the taxon is a synonym\n\n\n\n\n\n","category":"type"},{"location":"types/#GBIF.GBIFRecord","page":"Data representation","title":"GBIF.GBIFRecord","text":"Represents an occurrence in the GBIF format\n\nThis is currently a subset of all the fields. This struct is not mutable – this ensures that the objects returned from the GBIF database are never modified by the user.\n\nThe taxon field is a GBIFTaxon object, and can therefore be manipulated as any other GBIFTaxon.\n\n\n\n\n\n","category":"type"},{"location":"types/#GBIF.GBIFRecords","page":"Data representation","title":"GBIF.GBIFRecords","text":"List of occurrences and metadata\n\nThis type has actually very few information: the query field stores the query parameters. This type is mutable and fully iterable.\n\nThe occurrences field is pre-allocated, meaning that it will contain #undef elements up to the total number of hits on GBIF. When iterating, this is taken care of automatically, but this needs to be accounted for if writing code that accesses this field directly.\n\n\n\n\n\n","category":"type"},{"location":"data/#Retrieving-data","page":"Data retrieval","title":"Retrieving data","text":"","category":"section"},{"location":"data/#Getting-taxonomic-information","page":"Data retrieval","title":"Getting taxonomic information","text":"","category":"section"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"taxon","category":"page"},{"location":"data/#GBIF.taxon","page":"Data retrieval","title":"GBIF.taxon","text":"Get information about a taxon at any level\n\ntaxon(name::String)\n\nThis function will look for a taxon by its (scientific) name in the GBIF reference taxonomy.\n\nOptional arguments are\n\nrank::Union{Symbol,Nothing}=:SPECIES – the rank of the taxon you want. This is part of a controlled vocabulary, and can only be one of :DOMAIN, :CLASS, :CULTIVAR, :FAMILY, :FORM, :GENUS, :INFORMAL, :ORDER, :PHYLUM,, :SECTION, :SUBCLASS, :VARIETY, :TRIBE, :KINGDOM, :SUBFAMILY, :SUBFORM, :SUBGENUS, :SUBKINGDOM, :SUBORDER, :SUBPHYLUM, :SUBSECTION, :SUBSPECIES, :SUBTRIBE, :SUBVARIETY, :SUPERCLASS, :SUPERFAMILY, :SUPERORDER, and :SPECIES\nstrict::Bool=true – whether the match should be strict, or fuzzy\n\nFinally, one can also specify other levels of the taxonomy, using  kingdom, phylum, class, order, family, and genus, all of which can either be String or Nothing.\n\nIf a match is found, the result will be given as a GBIFTaxon. If not, this function will return nothing and give a warning.\n\n\n\n\n\nGet information about a taxon at any level using taxonID\n\ntaxon(id::Int)\n\nThis function will look for a taxon by its taxonID in the GBIF reference taxonomy.\n\n\n\n\n\n","category":"function"},{"location":"data/#Searching-for-occurrence-data","page":"Data retrieval","title":"Searching for occurrence data","text":"","category":"section"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"The most common task is to retrieve many occurrences according to a query. The core type of this package is GBIFRecord, which is a very lightweight type containing information about the query, and a list of GBIFRecord for every matching occurrence. Note that the GBIF \"search\" API is limited to 100000 results, and will not return more than this amount.","category":"page"},{"location":"data/#Single-occurrence","page":"Data retrieval","title":"Single occurrence","text":"","category":"section"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"occurrence","category":"page"},{"location":"data/#GBIF.occurrence","page":"Data retrieval","title":"GBIF.occurrence","text":"occurrence(key::String)\n\nReturns a GBIF occurrence identified by a key. The key can be given as a string or as an integer (there is a second method for integer keys). In case the status of the HTTP request is anything other than 200 (success), this function will throw an error.\n\n\n\n\n\n","category":"function"},{"location":"data/#Multiple-occurrences","page":"Data retrieval","title":"Multiple occurrences","text":"","category":"section"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"occurrences()\noccurrences(t::GBIFTaxon)","category":"page"},{"location":"data/#GBIF.occurrences-Tuple{}","page":"Data retrieval","title":"GBIF.occurrences","text":"occurrences(query::Pair...)\n\nThis function will return the latest occurrences matching the queries – usually 20, but this is entirely determined by the server default page size. The query parameters must be given as pairs, and are optional. Omitting the query will return the latest recorded occurrences for all taxa.\n\nThe arguments accepted as queries are documented on the GBIF API website.\n\nNote that this function will return even observations where the \"occurrenceStatus\" is \"ABSENT\"; therefore, for the majority of uses, your query will at least contain \"occurrenceStatus\" => \"PRESENT\".\n\n\n\n\n\n","category":"method"},{"location":"data/#GBIF.occurrences-Tuple{GBIFTaxon}","page":"Data retrieval","title":"GBIF.occurrences","text":"occurrences(t::GBIFTaxon, query::Pair...)\n\nReturns occurrences for a given taxon – the query arguments are the same as the occurrences function.\n\n\n\n\n\n","category":"method"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"When called with no arguments, this function will return a list of the latest 20 occurrences recorded in GBIF. Note that the GBIFRecords type, which is the return type of occurrences, implements the iteration interface.","category":"page"},{"location":"data/#Query-parameters","page":"Data retrieval","title":"Query parameters","text":"","category":"section"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"The queries must be given as pairs of values.","category":"page"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"occurrences(query::Pair...)\noccurrences(t::GBIFTaxon, query::Pair...)\noccurrences(t::Vector{GBIFTaxon}, query::Pair...)","category":"page"},{"location":"data/#GBIF.occurrences-Tuple{Vararg{Pair}}","page":"Data retrieval","title":"GBIF.occurrences","text":"occurrences(query::Pair...)\n\nThis function will return the latest occurrences matching the queries – usually 20, but this is entirely determined by the server default page size. The query parameters must be given as pairs, and are optional. Omitting the query will return the latest recorded occurrences for all taxa.\n\nThe arguments accepted as queries are documented on the GBIF API website.\n\nNote that this function will return even observations where the \"occurrenceStatus\" is \"ABSENT\"; therefore, for the majority of uses, your query will at least contain \"occurrenceStatus\" => \"PRESENT\".\n\n\n\n\n\n","category":"method"},{"location":"data/#GBIF.occurrences-Tuple{GBIFTaxon, Vararg{Pair}}","page":"Data retrieval","title":"GBIF.occurrences","text":"occurrences(t::GBIFTaxon, query::Pair...)\n\nReturns occurrences for a given taxon – the query arguments are the same as the occurrences function.\n\n\n\n\n\n","category":"method"},{"location":"data/#GBIF.occurrences-Tuple{Vector{GBIFTaxon}, Vararg{Pair}}","page":"Data retrieval","title":"GBIF.occurrences","text":"occurrences(t::Vector{GBIFTaxon}, query::Pair...)\n\nReturns occurrences for a series of taxa – the query arguments are the same as the occurrences function.\n\n\n\n\n\n","category":"method"},{"location":"data/#Batch-download-of-occurrences","page":"Data retrieval","title":"Batch-download of occurrences","text":"","category":"section"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"When calling occurrences, the list of possible GBIFRecord will be pre-allocated. Any subsequent call to occurrences! (on the GBIFRecords variable) will retrieve the next \"page\" of results, and add them to the collection:","category":"page"},{"location":"data/","page":"Data retrieval","title":"Data retrieval","text":"occurrences!","category":"page"},{"location":"data/#GBIF.occurrences!","page":"Data retrieval","title":"GBIF.occurrences!","text":"Get the next page of results\n\nThis function will retrieve the next page of results. By default, it will walk through queries 20 at a time. This can be modified by changing the .query[\"limit\"] value, to any value up to 300, which is the limit set by GBIF for the queries.\n\nIf filters have been applied to this query before, they will be removed to ensure that the previous and the new occurrences have the same status, but only for records that have already been retrieved.\n\n\n\n\n\n","category":"function"},{"location":"enums/#Enumerated-values","page":"Enumerated query parameters","title":"Enumerated values","text":"","category":"section"},{"location":"enums/","page":"Enumerated query parameters","title":"Enumerated query parameters","text":"The GBIF API has a number of controlled vocabularies to perform queries (also called \"enumerations\"). In order to keep the API and the package in sync, when the package is loaded, we query the API to see what values are enumerable, and what values are acceptable for each of these categories.","category":"page"},{"location":"enums/","page":"Enumerated query parameters","title":"Enumerated query parameters","text":"GBIF.enumerablevalues\nGBIF.enumeratedvalues","category":"page"},{"location":"enums/#GBIF.enumerablevalues","page":"Enumerated query parameters","title":"GBIF.enumerablevalues","text":"enumerablevalues()\n\nReturns an array of values that can be enumerated by the GBIF API.\n\n\n\n\n\n","category":"function"},{"location":"enums/#GBIF.enumeratedvalues","page":"Enumerated query parameters","title":"GBIF.enumeratedvalues","text":"enumeratedvalues(enumerable::String)\n\nFor a given enumerable value (given as a string as reported by the output of the enumerablevalues function), this function will return an array of possible values.\n\n\n\n\n\n","category":"function"},{"location":"enums/","page":"Enumerated query parameters","title":"Enumerated query parameters","text":"These functions are not exported, and are only called once per session to populate a dictionary with the accepted values. Note that at the moment, the only enumerated values that we store are the one accepted as search argument by the occurrence search endpoint.","category":"page"},{"location":"#Access-GBIF-data-with-Julia","page":"GBIF.jl","title":"Access GBIF data with Julia","text":"","category":"section"},{"location":"","page":"GBIF.jl","title":"GBIF.jl","text":"This package offers access to biodiversity data stored by the Global Biodiversity Information Facility (GBIF). The package currently offers a wrapper around the search API (to retrieve information on occurrences), and a limited wrapper around the species API (to retrieve the identifier of taxa).","category":"page"},{"location":"","page":"GBIF.jl","title":"GBIF.jl","text":"The focus on the package is on retrieving data; filtering and data analysis should be done using other packages from the Julia ecosystem. In particular, we provide support for DataFrames and Query (and therefore the rest of the \"queryverse\").","category":"page"},{"location":"#Core-features","page":"GBIF.jl","title":"Core features","text":"","category":"section"},{"location":"","page":"GBIF.jl","title":"GBIF.jl","text":"get taxonomic information using the taxon function\nretrieve a single occurrence as a GBIFRecord using occurrence\nsearch for multiple occurrences as a GBIFRecords according to a query using the occurrences function, and page through the results with occurrences!\nGBIFRecords are fully iterable","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"GBIF.format_date\nGBIF.validate_occurrence_query\nBase.show","category":"page"},{"location":"internals/#GBIF.format_date","page":"Internals","title":"GBIF.format_date","text":"Internal function to format dates in records\n\n\n\n\n\n","category":"function"},{"location":"internals/#GBIF.validate_occurrence_query","page":"Internals","title":"GBIF.validate_occurrence_query","text":"validate_occurrence_query(query::Pair)\n\nChecks that the queries for occurrences searches are well formatted.\n\nThis is used internally.\n\nEverything this function does is derived from the GBIF API documentation, including (and especially) the values for enum types. This modifies the queryset. Filters that are not allowed are removed, and filters that have incorrect values are dropped too.\n\nThis feels like the most conservative option – the user can always filter the results when they are returned.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Base.show","page":"Internals","title":"Base.show","text":"Show an occurrence\n\nshow(io::IO, o::GBIFRecord)\n\nDisplays the key, the taxon name, and the country of observation.\n\n\n\n\n\nShow several occurrences\n\nshow(io::IO, o::GBIFRecords)\n\nDisplays the total number, and the number of currently unmasked records.\n\n\n\n\n\nShow a taxonomic record\n\nshow(io::IO, t::GBIFTaxon)\n\nDisplays the taxon name.\n\n\n\n\n\n","category":"function"}]
}
