var documenterSearchIndex = {"docs":
[{"location":"#GBIF","page":"GBIF","title":"GBIF","text":"","category":"section"},{"location":"","page":"GBIF","title":"GBIF","text":"Modules = [GBIF]\nOrder   = [:function, :type]","category":"page"},{"location":"#Base.show-Tuple{IO, GBIFRecords}","page":"GBIF","title":"Base.show","text":"Show several occurrences\n\nshow(io::IO, o::GBIFRecords)\n\nDisplays the total number, and the number of currently unmasked records.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, GBIFRecord}","page":"GBIF","title":"Base.show","text":"Show an occurrence\n\nshow(io::IO, o::GBIFRecord)\n\nDisplays the key, the taxon name, and the country of observation.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, GBIFTaxon}","page":"GBIF","title":"Base.show","text":"Show a taxonomic record\n\nshow(io::IO, t::GBIFTaxon)\n\nDisplays the taxon name.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF._predicate-Tuple{Vararg{Pair}}","page":"GBIF","title":"GBIF._predicate","text":"_predicate(query::Pair...)\n\nGiven the arguments that are accepted by GBIF.occurrences, returns the corresponding predicates for the download API.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.apiauth-Tuple{}","page":"GBIF","title":"GBIF.apiauth","text":"Returns a dict to be used as part of the headers for HTTP functions to do authentication against the download API. This returns a dictionary that is used internally by calls to endpoints for the download API.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.doi-Tuple{String}","page":"GBIF","title":"GBIF.doi","text":"doi(doi::String)\n\nReturns the information of a download request by its DOI.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.download-Tuple{Any}","page":"GBIF","title":"GBIF.download","text":"download(key)\n\nDownloads the zip file associated to a specific query (identified by its key) as a zip file. Note that if you do not know the dataset key, this function also accepts the DOI. For now, the results are returned as Occurrences as opposed to GBIFRecords. This will be modifiable in a future release.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.enumerablevalues-Tuple{}","page":"GBIF","title":"GBIF.enumerablevalues","text":"enumerablevalues()\n\nReturns an array of values that can be enumerated by the GBIF API.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.enumeratedvalues-Tuple{String}","page":"GBIF","title":"GBIF.enumeratedvalues","text":"enumeratedvalues(enumerable::String)\n\nFor a given enumerable value (given as a string as reported by the output of the enumerablevalues function), this function will return an array of possible values.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.format_date-Tuple{Any, Any}","page":"GBIF","title":"GBIF.format_date","text":"Internal function to format dates in records\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.occurrence-Tuple{String}","page":"GBIF","title":"GBIF.occurrence","text":"occurrence(key::String)\n\nReturns a GBIF occurrence identified by a key. The key can be given as a string or as an integer (there is a second method for integer keys). In case the status of the HTTP request is anything other than 200 (success), this function will throw an error.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.occurrences!-Tuple{GBIFRecords}","page":"GBIF","title":"GBIF.occurrences!","text":"Get the next page of results\n\nThis function will retrieve the next page of results. By default, it will walk through queries 20 at a time. This can be modified by changing the .query[\"limit\"] value, to any value up to 300, which is the limit set by GBIF for the queries.\n\nIf filters have been applied to this query before, they will be removed to ensure that the previous and the new occurrences have the same status, but only for records that have already been retrieved.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.occurrences-Tuple{GBIFTaxon, Vararg{Pair}}","page":"GBIF","title":"GBIF.occurrences","text":"occurrences(t::GBIFTaxon, query::Pair...)\n\nReturns occurrences for a given taxon – the query arguments are the same as the occurrences function.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.occurrences-Tuple{Vararg{Pair}}","page":"GBIF","title":"GBIF.occurrences","text":"occurrences(query::Pair...)\n\nThis function will return the latest occurrences matching the queries – usually 20, but this is entirely determined by the server default page size. The query parameters must be given as pairs, and are optional. Omitting the query will return the latest recorded occurrences for all taxa.\n\nThe arguments accepted as queries are documented on the GBIF API website.\n\nNote that this function will return even observations where the \"occurrenceStatus\" is \"ABSENT\"; therefore, for the majority of uses, your query will at least contain \"occurrenceStatus\" => \"PRESENT\".\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.occurrences-Tuple{Vector{GBIFTaxon}, Vararg{Pair}}","page":"GBIF","title":"GBIF.occurrences","text":"occurrences(t::Vector{GBIFTaxon}, query::Pair...)\n\nReturns occurrences for a series of taxa – the query arguments are the same as the occurrences function.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.request-Tuple{Vararg{Pair}}","page":"GBIF","title":"GBIF.request","text":"download\n\nPrepares a request for a download through the GBIF API\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.taxon-Tuple{Int64}","page":"GBIF","title":"GBIF.taxon","text":"Get information about a taxon at any level using taxonID\n\ntaxon(id::Int)\n\nThis function will look for a taxon by its taxonID in the GBIF reference taxonomy.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.taxon-Tuple{String}","page":"GBIF","title":"GBIF.taxon","text":"Get information about a taxon at any level\n\ntaxon(name::String)\n\nThis function will look for a taxon by its (scientific) name in the GBIF reference taxonomy.\n\nOptional arguments are\n\nrank::Union{Symbol,Nothing}=:SPECIES – the rank of the taxon you want. This is part of a controlled vocabulary, and can only be one of :DOMAIN, :CLASS, :CULTIVAR, :FAMILY, :FORM, :GENUS, :INFORMAL, :ORDER, :PHYLUM,, :SECTION, :SUBCLASS, :VARIETY, :TRIBE, :KINGDOM, :SUBFAMILY, :SUBFORM, :SUBGENUS, :SUBKINGDOM, :SUBORDER, :SUBPHYLUM, :SUBSECTION, :SUBSPECIES, :SUBTRIBE, :SUBVARIETY, :SUPERCLASS, :SUPERFAMILY, :SUPERORDER, and :SPECIES\nstrict::Bool=true – whether the match should be strict, or fuzzy\n\nFinally, one can also specify other levels of the taxonomy, using  kingdom, phylum, class, order, family, and genus, all of which can either be String or Nothing.\n\nIf a match is found, the result will be given as a GBIFTaxon. If not, this function will return nothing and give a warning.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.validate_occurrence_query-Tuple{Pair}","page":"GBIF","title":"GBIF.validate_occurrence_query","text":"validate_occurrence_query(query::Pair)\n\nChecks that the queries for occurrences searches are well formatted.\n\nThis is used internally.\n\nEverything this function does is derived from the GBIF API documentation, including (and especially) the values for enum types. This modifies the queryset. Filters that are not allowed are removed, and filters that have incorrect values are dropped too.\n\nThis feels like the most conservative option – the user can always filter the results when they are returned.\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.GBIFRecord","page":"GBIF","title":"GBIF.GBIFRecord","text":"Represents an occurrence in the GBIF format\n\nThis is currently a subset of all the fields. This struct is not mutable – this ensures that the objects returned from the GBIF database are never modified by the user.\n\nThe taxon field is a GBIFTaxon object, and can therefore be manipulated as any other GBIFTaxon.\n\n\n\n\n\n","category":"type"},{"location":"#GBIF.GBIFRecord-Tuple{Dict{String, Any}}","page":"GBIF","title":"GBIF.GBIFRecord","text":"Generates an occurrence from the JSON response of GBIF\n\n\n\n\n\n","category":"method"},{"location":"#GBIF.GBIFRecords","page":"GBIF","title":"GBIF.GBIFRecords","text":"List of occurrences and metadata\n\nThis type has actually very few information: the query field stores the query parameters. This type is mutable and fully iterable.\n\nThe occurrences field is pre-allocated, meaning that it will contain #undef elements up to the total number of hits on GBIF. When iterating, this is taken care of automatically, but this needs to be accounted for if writing code that accesses this field directly.\n\n\n\n\n\n","category":"type"},{"location":"#GBIF.GBIFTaxon","page":"GBIF","title":"GBIF.GBIFTaxon","text":"Representation of a GBIF taxon\n\nAll taxonomic level fields can either be missing, or a pair linking the name of the taxon/level to its unique key in the GBIF database.\n\nname - the vernacular name of the taxon\n\nscientific - the accepted scientific name of the species\n\nstatus - the status of the taxon\n\nmatch - the type of match\n\nkingdom - a Pair linking the name of the kingdom to its unique ID\n\nphylum - a Pair linking the name of the phylum to its unique ID\n\nclass - a Pair linking the name of the class to its unique ID\n\norder - a Pair linking the name of the order to its unique ID\n\nfamily - a Pair linking the name of the family to its unique ID\n\ngenus - a Pair linking the name of the genus to its unique ID\n\nspecies - a Pair linking the name of the species to its unique ID\n\nconfidence - an Int64 to note the confidence in the match\n\nsynonym - a Boolean indicating whether the taxon is a synonym\n\n\n\n\n\n","category":"type"}]
}
