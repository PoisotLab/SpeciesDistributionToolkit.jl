var documenterSearchIndex = {"docs":
[{"location":"#SimpleSDMLayers","page":"SimpleSDMLayers","title":"SimpleSDMLayers","text":"","category":"section"},{"location":"","page":"SimpleSDMLayers","title":"SimpleSDMLayers","text":"Modules = [SimpleSDMLayers]\nOrder   = [:function, :type]","category":"page"},{"location":"#SimpleSDMLayers._read_geotiff-Tuple{AbstractString}","page":"SimpleSDMLayers","title":"SimpleSDMLayers._read_geotiff","text":"geotiff(file; bandnumber::Integer=1, left=nothing, right=nothing, bottom=nothing, top=nothing, driver)\n\nThe geotiff function reads a geotiff file, and returns it as a matrix of the correct type. The optional arguments left, right, bottom, and left are defining the bounding box to read from the file. This is particularly useful if you want to get a small subset from large files.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers._write_geotiff-Union{Tuple{T}, Tuple{AbstractString, Array{SDMLayer{T}, 1}}} where T<:Number","page":"SimpleSDMLayers","title":"SimpleSDMLayers._write_geotiff","text":"geotiff(file::AbstractString, layers::Vector{SDMLayer{T}}; nodata::T=convert(T, -9999)) where {T <: Number}\n\nStores a series of layers in a file, where every layer in a band. See geotiff for other options.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.burnin!-Union{Tuple{T}, Tuple{SDMLayer{T}, Vector{T}}} where T","page":"SimpleSDMLayers","title":"SimpleSDMLayers.burnin!","text":"burnin!(L::SDMLayer{T}, v::Vector{T})\n\nReplaces the values of L by the values in the vector v.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.burnin-Union{Tuple{T}, Tuple{SDMLayer, Vector{T}}} where T","page":"SimpleSDMLayers","title":"SimpleSDMLayers.burnin","text":"burnin(L::SDMLayer, v::Vector{T}) where {T}\n\nWrites the value of v in a layer similar to L, and returns it. It is ASSUMED (but essentially impossible to check) that the values of v are presented in the correct order. This uses burnin! internally.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.coarsen","page":"SimpleSDMLayers","title":"SimpleSDMLayers.coarsen","text":"coarsen(f, L::SDMLayer, mask=(2, 2))\n\nCoarsens a layer by collecting a sub-grid of size mask, and applying the function f to all non-empty cells within this mask. The core constraint is that f must take a vector and return a single element (and the size of the mask must be compatible with the size of the layer).\n\n\n\n\n\n","category":"function"},{"location":"#SimpleSDMLayers.interpolate-Tuple{SDMLayer, SDMLayer}","page":"SimpleSDMLayers","title":"SimpleSDMLayers.interpolate","text":"interpolate(layer::SDMLayer, destination::SDMLayer)\n\nInterpolates a layer target so that it uses the same grid, crs, etc as destination.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.interpolate-Tuple{SDMLayer}","page":"SimpleSDMLayers","title":"SimpleSDMLayers.interpolate","text":"interpolate(layer::SDMLayer; dest=\"+proj=natearth2\", newsize=nothing)\n\nReturns an interpolated version of the later under the new destination CRS (natearth2 by default), and with optionally a new size of newsize.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.mask!-Tuple{SDMLayer, SDMLayer}","page":"SimpleSDMLayers","title":"SimpleSDMLayers.mask!","text":"mask!(layer::SDMLayer, template::SDMLayer)\n\nUpdates the positions in the first layer to be those that have a value in the second layer.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.mask-Tuple{SDMLayer, SDMLayer}","page":"SimpleSDMLayers","title":"SimpleSDMLayers.mask","text":"mask(layer::SDMLayer, template::SDMLayer)\n\nReturns a copy of the first layer masked according to the second layer. See also mask!.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.mosaic-Tuple{Any, Vector{<:SDMLayer}}","page":"SimpleSDMLayers","title":"SimpleSDMLayers.mosaic","text":"mosaic(f, stack::Vector{<:SDMLayer})\n\nReturns a layer that is the application of f to the values at each cell in the array of layers given as the second argument.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.nodata!-Union{Tuple{T}, Tuple{SDMLayer, T}} where T<:Function","page":"SimpleSDMLayers","title":"SimpleSDMLayers.nodata!","text":"nodata!(layer::SDMLayer{T}, f)\n\nRemoves the data matching a function\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.nodata!-Union{Tuple{T}, Tuple{SDMLayer{T}, T}} where T","page":"SimpleSDMLayers","title":"SimpleSDMLayers.nodata!","text":"nodata!(layer::SDMLayer{T}, nodata::T) where {T}\n\nChanges the value of the layer representing no data. This modifies the layer passed as its first argument.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.nodata-Tuple{SDMLayer, Vararg{Any}}","page":"SimpleSDMLayers","title":"SimpleSDMLayers.nodata","text":"nodata(layer::SDMLayer, args...)\n\nMakes a copy and calls nodata! on it\n\n\n\n\n\n","category":"method"},{"location":"#SimpleSDMLayers.tiles","page":"SimpleSDMLayers","title":"SimpleSDMLayers.tiles","text":"tiles(layer::SDMLayer, size::Tuple{Int64,Int64})\n\n\n\n\n\n","category":"function"},{"location":"#SimpleSDMLayers.SDMLayer","page":"SimpleSDMLayers","title":"SimpleSDMLayers.SDMLayer","text":"SDMLayer{T}\n\nDefines a layer of geospatial information.\n\nThe type has two data fields:\n\ngrid: a Matrix of type T\nindices: a BitMatrix to see which positions are valued\n\nEach row in the grid field represents a slice of the raster of equal northing, i.e. the information is laid out in the matrix as it would be represented on a map once displayed. Similarly, columns have the same easting.\n\nThe geospatial information is represented by three positional fields:\n\nx and y: two tuples, indicating the coordinates of the corners alongside the x and y dimensions (e.g. easting/northing) - the default values are (-180., 180.) and (-90., 90.), which represents the entire surface of the globe in WGS84\ncrs: any String representation of the CRS which can be handled by Proj.jl - the default is  \"+proj=longlat +datum=WGS84 +no_defs\", which represents a latitude/longitude coordinate system\n\n\n\n\n\n","category":"type"}]
}
